/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package grupob;

import controlador.Manager;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import model.Adherente;
import model.PartidoPolitico;
import model.TipoProcesoVotacion;

/**
 *
 * @author USUARIO
 */
public class VistaAdherentes extends javax.swing.JPanel {

    /**
     * Creates new form VistaAdherentes
     */
    public static FramePrincipal padre;
    private PartidoPolitico partidoAdherente;
    public VistaAdherentes(FramePrincipal parent) {
        padre = parent;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        nombre_partido = new javax.swing.JTextField();
        jScrollPane10 = new javax.swing.JScrollPane();
        tabla_adherentes = new javax.swing.JTable();
        jButton43 = new javax.swing.JButton();
        jButton44 = new javax.swing.JButton();
        boton_cancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tipo_proceso = new javax.swing.JTextField();

        jLabel23.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        jLabel23.setText("Adherentes en Estado de Revision");

        jLabel24.setText("Partido:");

        nombre_partido.setEnabled(false);

        tabla_adherentes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "DNI", "Nombre", "Nombre JPG", "Tipo Proceso", "Lugar", "Marcar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane10.setViewportView(tabla_adherentes);

        jButton43.setText("Validar");
        jButton43.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton43ActionPerformed(evt);
            }
        });

        jButton44.setText("Invalidar");
        jButton44.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton44ActionPerformed(evt);
            }
        });

        boton_cancelar.setText("Cancelar");
        boton_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_cancelarActionPerformed(evt);
            }
        });

        jLabel1.setText("Tipo de proceso:");

        tipo_proceso.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jButton43)
                        .addGap(55, 55, 55)
                        .addComponent(jButton44)
                        .addGap(55, 55, 55)
                        .addComponent(boton_cancelar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel24)
                                .addGap(63, 63, 63))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(21, 21, 21)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(tipo_proceso)
                            .addComponent(nombre_partido, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel23)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(nombre_partido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tipo_proceso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton43)
                    .addComponent(jButton44)
                    .addComponent(boton_cancelar))
                .addGap(0, 19, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton43ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton43ActionPerformed
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int n =JOptionPane.showConfirmDialog (null, "Estas Seguro que deseas validar estos registros?","Advertencia",dialogButton);
        if(n == JOptionPane.YES_OPTION){

            //aquí se debe regresar a la misma vista pero recargando la tabla para eliminar los adherentes que ya fueron validados
        }
        else {

        }
    }//GEN-LAST:event_jButton43ActionPerformed

    private void jButton44ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton44ActionPerformed
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int n =JOptionPane.showConfirmDialog (null, "Estas Seguro que deseas invalidar estos registros?","Advertencia",dialogButton);
        if(n == JOptionPane.YES_OPTION){

            //aquí se debe regresar a la misma vista pero recargando la tabla para eliminar los adherentes que ya fueron invalidados
        }
        else {
        }
    }//GEN-LAST:event_jButton44ActionPerformed

    private void boton_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_cancelarActionPerformed

        //el cancelar te debe llevar a la pantalla principal de busqueda
        padre.mostrarDetallePartido(partidoAdherente);
    }//GEN-LAST:event_boton_cancelarActionPerformed

    public void showDetail(PartidoPolitico p, int tipoProc){
        partidoAdherente = p;
        nombre_partido.setText(p.getNombre());
        ArrayList<PartidoPolitico> partidos = Manager.queryPartidoByNombTipo(p.getNombre(), tipoProc);
        TipoProcesoVotacion proceso = Manager.queryProcesoById(tipoProc);
        tipo_proceso.setText(proceso.getNombre());
        adherentesModel = new MyTableModel();
        if(tipoProc==1) 
            adherentesModel.titles = new String[]{"DNI", "Nombre JPG", "Marcar"};
        if(tipoProc==2)
            adherentesModel.titles = new String[]{"DNI", "Nombre JPG", "Region", "Marcar"};
        if(tipoProc==3)
            adherentesModel.titles= new String[]{"DNI", "Nombre JPG", "Distrito", "Marcar"};
        if (tipoProc==4) 
            adherentesModel.titles = new String[]{"DNI", "Nombre JPG", "Local", "Marcar"};
        if(tipoProc==5)
            adherentesModel.titles = new String[]{"DNI", "Nombre JPG", "Instit.", "Marcar"};
        ArrayList<Adherente> ads = new ArrayList<Adherente>();
        for(int i=0;i<partidos.size();i++){
            ads = Manager.queryAdherentesByPartidoId(partidos.get(i).getId());
        }
        adherentesModel.adherentes = ads;
        adherentesModel.valores = new Boolean[ads.size()];
        for(int i=0;i<ads.size();i++)
            adherentesModel.valores[i]=Boolean.FALSE;
        tabla_adherentes.setModel(adherentesModel);
        
    }
    
    class MyTableModel extends AbstractTableModel{
		ArrayList<Adherente> adherentes = null; 
		String [] titles = {"DNI", "Nombre", "Nombre JPG"};
                Boolean [] valores = null;
		@Override
		public int getColumnCount() {
			// TODO Auto-generated method stub
			return titles.length;
		}

		@Override
		public int getRowCount() {
			// TODO Auto-generated method stub
			return adherentes.size();
		}

		@Override
		public Object getValueAt(int row, int col) {
			String value = "";
			switch(col){
				case 0:  value = "" + adherentes.get(row).getDni(); break;
				case 1:  value = adherentes.get(row).getJpg(); break;
				case 2:  if(titles.length>3){
                                            if(titles[2]=="Region")
                                            value = Manager.queryByIdRegion(Manager.queryPartidoById(adherentes.get(row).getIdPartido()).getIdRegion()).getNombre(); 
                                            if(titles[2]=="Distrito")
                                                value = Manager.queryByIdDistrito(Manager.queryPartidoById(adherentes.get(row).getIdPartido()).getIdDistrito()).getNombre();
                                            if(titles[2]=="Local")
                                                value = Manager.queryLocalById(Manager.queryPartidoById(adherentes.get(row).getIdPartido()).getIdLocal()).getNombre();
                                           if(titles[2]=="Instit.")
                                               value = Manager.queryInstitucionById(Manager.queryPartidoById(adherentes.get(row).getIdPartido()).getIdInstitucion()).getNombre();
                                        } else return valores[row];
                                            break;
				case 3:  if(titles.length>3) return valores[row];				
			}
			return value;
		}
		
		public String getColumnName(int col){
			return titles[col];
		}
                
                @Override
            public Class getColumnClass(int column) {
                switch (column) {
                    case 0:
                        return String.class;
                    case 1:
                        return String.class;
                    case 2:
                        if(titles.length>3)
                            return String.class;
                        else return Boolean.class;
                    case 3:
                        return Boolean.class;
                    default:
                        return Boolean.class;
                }
            }
            
            @Override
            public void setValueAt(Object value, int row, int column) {
                if(titles.length>3 && column ==3){
                    valores[row]=!valores[row];
                }
                if(titles.length==3 && column==2 )
                    valores[row]=!valores[row];
                return;
              }
            
            public boolean isCellEditable(int row, int column) {
                if(titles.length>3 && column == 3) return true;
                if(titles.length==3 && column==2) return true;
                return false;
              }
		
	}
    private MyTableModel adherentesModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boton_cancelar;
    private javax.swing.JButton jButton43;
    private javax.swing.JButton jButton44;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JTextField nombre_partido;
    private javax.swing.JTable tabla_adherentes;
    private javax.swing.JTextField tipo_proceso;
    // End of variables declaration//GEN-END:variables
}
